{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) : typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) : (global = global || self, factory(global.swipeable = {}, global.react));\n})(this, function (exports, React) {\n  function _extends() {\n    _extends = Object.assign || function (target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n      return target;\n    };\n    return _extends.apply(this, arguments);\n  }\n  var LEFT = \"Left\";\n  var RIGHT = \"Right\";\n  var UP = \"Up\";\n  var DOWN = \"Down\";\n  var defaultProps = {\n    delta: 10,\n    preventDefaultTouchmoveEvent: false,\n    rotationAngle: 0,\n    trackMouse: false,\n    trackTouch: true\n  };\n  var initialState = {\n    first: true,\n    initial: [0, 0],\n    start: 0,\n    swiping: false,\n    xy: [0, 0]\n  };\n  var mouseMove = \"mousemove\";\n  var mouseUp = \"mouseup\";\n  var touchEnd = \"touchend\";\n  var touchMove = \"touchmove\";\n  var touchStart = \"touchstart\";\n  function getDirection(absX, absY, deltaX, deltaY) {\n    if (absX > absY) {\n      if (deltaX > 0) {\n        return RIGHT;\n      }\n      return LEFT;\n    } else if (deltaY > 0) {\n      return DOWN;\n    }\n    return UP;\n  }\n  function rotateXYByAngle(pos, angle) {\n    if (angle === 0) return pos;\n    var angleInRadians = Math.PI / 180 * angle;\n    var x = pos[0] * Math.cos(angleInRadians) + pos[1] * Math.sin(angleInRadians);\n    var y = pos[1] * Math.cos(angleInRadians) - pos[0] * Math.sin(angleInRadians);\n    return [x, y];\n  }\n  function getHandlers(set, handlerProps) {\n    var onStart = function onStart(event) {\n      // if more than a single touch don't track, for now...\n      if (event && \"touches\" in event && event.touches.length > 1) return;\n      set(function (state, props) {\n        // setup mouse listeners on document to track swipe since swipe can leave container\n        if (props.trackMouse) {\n          document.addEventListener(mouseMove, onMove);\n          document.addEventListener(mouseUp, onUp);\n        }\n        var _ref = \"touches\" in event ? event.touches[0] : event,\n          clientX = _ref.clientX,\n          clientY = _ref.clientY;\n        var xy = rotateXYByAngle([clientX, clientY], props.rotationAngle);\n        return _extends({}, state, initialState, {\n          initial: [].concat(xy),\n          xy: xy,\n          start: event.timeStamp || 0\n        });\n      });\n    };\n    var onMove = function onMove(event) {\n      set(function (state, props) {\n        // Discount a swipe if additional touches are present after\n        // a swipe has started.\n        if (\"touches\" in event && event.touches.length > 1) {\n          return state;\n        }\n        var _ref2 = \"touches\" in event ? event.touches[0] : event,\n          clientX = _ref2.clientX,\n          clientY = _ref2.clientY;\n        var _rotateXYByAngle = rotateXYByAngle([clientX, clientY], props.rotationAngle),\n          x = _rotateXYByAngle[0],\n          y = _rotateXYByAngle[1];\n        var deltaX = x - state.xy[0];\n        var deltaY = y - state.xy[1];\n        var absX = Math.abs(deltaX);\n        var absY = Math.abs(deltaY);\n        var time = (event.timeStamp || 0) - state.start;\n        var velocity = Math.sqrt(absX * absX + absY * absY) / (time || 1);\n        var vxvy = [deltaX / (time || 1), deltaY / (time || 1)]; // if swipe is under delta and we have not started to track a swipe: skip update\n\n        if (absX < props.delta && absY < props.delta && !state.swiping) return state;\n        var dir = getDirection(absX, absY, deltaX, deltaY);\n        var eventData = {\n          absX: absX,\n          absY: absY,\n          deltaX: deltaX,\n          deltaY: deltaY,\n          dir: dir,\n          event: event,\n          first: state.first,\n          initial: state.initial,\n          velocity: velocity,\n          vxvy: vxvy\n        }; // call onSwipeStart if present and is first swipe event\n\n        eventData.first && props.onSwipeStart && props.onSwipeStart(eventData); // Call onSwiping if present\n\n        props.onSwiping && props.onSwiping(eventData); // track if a swipe is cancelable(handler for swiping or swiped(dir) exists)\n        // so we can call preventDefault if needed\n\n        var cancelablePageSwipe = false;\n        if (props.onSwiping || props.onSwiped || \"onSwiped\" + dir in props) {\n          cancelablePageSwipe = true;\n        }\n        if (cancelablePageSwipe && props.preventDefaultTouchmoveEvent && props.trackTouch && event.cancelable) event.preventDefault();\n        return _extends({}, state, {\n          // first is now always false\n          first: false,\n          eventData: eventData,\n          swiping: true\n        });\n      });\n    };\n    var onEnd = function onEnd(event) {\n      set(function (state, props) {\n        var eventData;\n        if (state.swiping && state.eventData) {\n          eventData = _extends({}, state.eventData, {\n            event: event\n          });\n          props.onSwiped && props.onSwiped(eventData);\n          var onSwipedDir = \"onSwiped\" + eventData.dir;\n          if (onSwipedDir in props) {\n            props[onSwipedDir](eventData);\n          }\n        } else {\n          props.onTap && props.onTap({\n            event: event\n          });\n        }\n        return _extends({}, state, initialState, {\n          eventData: eventData\n        });\n      });\n    };\n    var cleanUpMouse = function cleanUpMouse() {\n      // safe to just call removeEventListener\n      document.removeEventListener(mouseMove, onMove);\n      document.removeEventListener(mouseUp, onUp);\n    };\n    var onUp = function onUp(e) {\n      cleanUpMouse();\n      onEnd(e);\n    };\n    /**\r\n     * Switch of \"passive\" property for now.\r\n     * When `preventDefaultTouchmoveEvent` is:\r\n     * - true => { passive: false }\r\n     * - false => { passive: true }\r\n     *\r\n     * Could take entire `addEventListener` options object as a param later?\r\n     */\n\n    var attachTouch = function attachTouch(el, passive) {\n      var cleanup = function cleanup() {};\n      if (el && el.addEventListener) {\n        // attach touch event listeners and handlers\n        var tls = [[touchStart, onStart], [touchMove, onMove], [touchEnd, onEnd]];\n        tls.forEach(function (_ref3) {\n          var e = _ref3[0],\n            h = _ref3[1];\n          return el.addEventListener(e, h, {\n            passive: passive\n          });\n        }); // return properly scoped cleanup method for removing listeners, options not required\n\n        cleanup = function cleanup() {\n          return tls.forEach(function (_ref4) {\n            var e = _ref4[0],\n              h = _ref4[1];\n            return el.removeEventListener(e, h);\n          });\n        };\n      }\n      return cleanup;\n    };\n    var onRef = function onRef(el) {\n      // \"inline\" ref functions are called twice on render, once with null then again with DOM element\n      // ignore null here\n      if (el === null) return;\n      set(function (state, props) {\n        // if the same DOM el as previous just return state\n        if (state.el === el) return state;\n        var addState = {}; // if new DOM el clean up old DOM and reset cleanUpTouch\n\n        if (state.el && state.el !== el && state.cleanUpTouch) {\n          state.cleanUpTouch();\n          addState.cleanUpTouch = undefined;\n        } // only attach if we want to track touch\n\n        if (props.trackTouch && el) {\n          addState.cleanUpTouch = attachTouch(el, !props.preventDefaultTouchmoveEvent);\n        } // store event attached DOM el for comparison, clean up, and re-attachment\n\n        return _extends({}, state, {\n          el: el\n        }, addState);\n      });\n    }; // set ref callback to attach touch event listeners\n\n    var output = {\n      ref: onRef\n    }; // if track mouse attach mouse down listener\n\n    if (handlerProps.trackMouse) {\n      output.onMouseDown = onStart;\n    }\n    return [output, attachTouch];\n  }\n  function updateTransientState(state, props, attachTouch) {\n    var addState = {}; // clean up touch handlers if no longer tracking touches\n\n    if (!props.trackTouch && state.cleanUpTouch) {\n      state.cleanUpTouch();\n      addState.cleanUpTouch = undefined;\n    } else if (props.trackTouch && !state.cleanUpTouch) {\n      // attach/re-attach touch handlers\n      if (state.el) {\n        addState.cleanUpTouch = attachTouch(state.el, !props.preventDefaultTouchmoveEvent);\n      }\n    }\n    return _extends({}, state, addState);\n  }\n  function useSwipeable(options) {\n    var trackMouse = options.trackMouse;\n    var transientState = React.useRef(_extends({}, initialState));\n    var transientProps = React.useRef(_extends({}, defaultProps));\n    transientProps.current = _extends({}, defaultProps, options);\n    var _React$useMemo = React.useMemo(function () {\n        return getHandlers(function (stateSetter) {\n          return transientState.current = stateSetter(transientState.current, transientProps.current);\n        }, {\n          trackMouse: trackMouse\n        });\n      }, [trackMouse]),\n      handlers = _React$useMemo[0],\n      attachTouch = _React$useMemo[1];\n    transientState.current = updateTransientState(transientState.current, transientProps.current, attachTouch);\n    return handlers;\n  }\n  exports.DOWN = DOWN;\n  exports.LEFT = LEFT;\n  exports.RIGHT = RIGHT;\n  exports.UP = UP;\n  exports.useSwipeable = useSwipeable;\n});","map":{"version":3,"mappings":"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","names":["LEFT","RIGHT","UP","DOWN","defaultProps","delta","preventDefaultTouchmoveEvent","rotationAngle","trackMouse","trackTouch","initialState","first","initial","start","swiping","xy","mouseMove","mouseUp","touchEnd","touchMove","touchStart","getDirection","absX","absY","deltaX","deltaY","rotateXYByAngle","pos","angle","angleInRadians","Math","PI","x","cos","sin","y","getHandlers","set","handlerProps","onStart","event","touches","length","state","props","document","addEventListener","onMove","onUp","clientX","clientY","timeStamp","abs","time","velocity","sqrt","vxvy","dir","eventData","onSwipeStart","onSwiping","cancelablePageSwipe","onSwiped","cancelable","preventDefault","onEnd","onSwipedDir","onTap","cleanUpMouse","removeEventListener","e","attachTouch","el","passive","cleanup","tls","forEach","h","onRef","addState","cleanUpTouch","undefined","output","ref","onMouseDown","updateTransientState","useSwipeable","options","transientState","React","transientProps","current","stateSetter","handlers"],"sources":["C:\\Users\\19011\\Desktop\\Flipkart-Clone-Frontend-\\client\\node_modules\\react-swipeable\\src\\types.ts","C:\\Users\\19011\\Desktop\\Flipkart-Clone-Frontend-\\client\\node_modules\\react-swipeable\\src\\index.ts"],"sourcesContent":["import * as React from \"react\";\n\nexport const LEFT = \"Left\";\nexport const RIGHT = \"Right\";\nexport const UP = \"Up\";\nexport const DOWN = \"Down\";\nexport type HandledEvents = React.MouseEvent | TouchEvent | MouseEvent;\nexport type Vector2 = [number, number];\nexport type SwipeDirections =\n  | typeof LEFT\n  | typeof RIGHT\n  | typeof UP\n  | typeof DOWN;\nexport interface SwipeEventData {\n  absX: number;\n  absY: number;\n  deltaX: number;\n  deltaY: number;\n  dir: SwipeDirections;\n  event: HandledEvents;\n  first: boolean;\n  initial: Vector2;\n  velocity: number;\n  vxvy: Vector2;\n}\n\nexport type SwipeCallback = (eventData: SwipeEventData) => void;\nexport type TapCallback = ({ event }: { event: HandledEvents }) => void;\n\nexport type SwipeableCallbacks = {\n  // Event handler/callbacks\n  onSwipeStart: SwipeCallback;\n  onSwiped: SwipeCallback;\n  onSwipedDown: SwipeCallback;\n  onSwipedLeft: SwipeCallback;\n  onSwipedRight: SwipeCallback;\n  onSwipedUp: SwipeCallback;\n  onSwiping: SwipeCallback;\n  onTap: TapCallback;\n};\n\n// Configuration Options\nexport interface ConfigurationOptions {\n  delta: number;\n  preventDefaultTouchmoveEvent: boolean;\n  rotationAngle: number;\n  trackMouse: boolean;\n  trackTouch: boolean;\n}\n\nexport type SwipeableProps = Partial<SwipeableCallbacks & ConfigurationOptions>;\n\nexport type SwipeablePropsWithDefaultOptions = Partial<SwipeableCallbacks> &\n  ConfigurationOptions;\n\nexport interface SwipeableHandlers {\n  ref(element: HTMLElement | null): void;\n  onMouseDown?(event: React.MouseEvent): void;\n}\n\nexport type SwipeableState = {\n  cleanUpTouch?: () => void;\n  el?: HTMLElement;\n  eventData?: SwipeEventData;\n  first: boolean;\n  initial: Vector2;\n  start: number;\n  swiping: boolean;\n  xy: Vector2;\n};\n\nexport type StateSetter = (\n  state: SwipeableState,\n  props: SwipeablePropsWithDefaultOptions\n) => SwipeableState;\nexport type Setter = (stateSetter: StateSetter) => void;\nexport type AttachTouch = (el: HTMLElement, passive: boolean) => () => void;\n","/* global document */\nimport * as React from \"react\";\nimport {\n  AttachTouch,\n  SwipeDirections,\n  DOWN,\n  SwipeEventData,\n  HandledEvents,\n  LEFT,\n  RIGHT,\n  Setter,\n  SwipeableHandlers,\n  SwipeableProps,\n  SwipeablePropsWithDefaultOptions,\n  SwipeableState,\n  SwipeCallback,\n  TapCallback,\n  UP,\n  Vector2,\n} from \"./types\";\n\nexport {\n  LEFT,\n  RIGHT,\n  UP,\n  DOWN,\n  SwipeDirections,\n  SwipeEventData,\n  SwipeCallback,\n  TapCallback,\n  SwipeableHandlers,\n  SwipeableProps,\n  Vector2,\n};\n\nconst defaultProps = {\n  delta: 10,\n  preventDefaultTouchmoveEvent: false,\n  rotationAngle: 0,\n  trackMouse: false,\n  trackTouch: true,\n};\nconst initialState: SwipeableState = {\n  first: true,\n  initial: [0, 0],\n  start: 0,\n  swiping: false,\n  xy: [0, 0],\n};\nconst mouseMove = \"mousemove\";\nconst mouseUp = \"mouseup\";\nconst touchEnd = \"touchend\";\nconst touchMove = \"touchmove\";\nconst touchStart = \"touchstart\";\n\nfunction getDirection(\n  absX: number,\n  absY: number,\n  deltaX: number,\n  deltaY: number\n): SwipeDirections {\n  if (absX > absY) {\n    if (deltaX > 0) {\n      return RIGHT;\n    }\n    return LEFT;\n  } else if (deltaY > 0) {\n    return DOWN;\n  }\n  return UP;\n}\n\nfunction rotateXYByAngle(pos: Vector2, angle: number): Vector2 {\n  if (angle === 0) return pos;\n  const angleInRadians = (Math.PI / 180) * angle;\n  const x =\n    pos[0] * Math.cos(angleInRadians) + pos[1] * Math.sin(angleInRadians);\n  const y =\n    pos[1] * Math.cos(angleInRadians) - pos[0] * Math.sin(angleInRadians);\n  return [x, y];\n}\n\nfunction getHandlers(\n  set: Setter,\n  handlerProps: { trackMouse: boolean | undefined }\n): [\n  {\n    ref: (element: HTMLElement | null) => void;\n    onMouseDown?: (event: React.MouseEvent) => void;\n  },\n  AttachTouch\n] {\n  const onStart = (event: HandledEvents) => {\n    // if more than a single touch don't track, for now...\n    if (event && \"touches\" in event && event.touches.length > 1) return;\n\n    set((state, props) => {\n      // setup mouse listeners on document to track swipe since swipe can leave container\n      if (props.trackMouse) {\n        document.addEventListener(mouseMove, onMove);\n        document.addEventListener(mouseUp, onUp);\n      }\n      const { clientX, clientY } =\n        \"touches\" in event ? event.touches[0] : event;\n      const xy = rotateXYByAngle([clientX, clientY], props.rotationAngle);\n      return {\n        ...state,\n        ...initialState,\n        initial: [...xy],\n        xy,\n        start: event.timeStamp || 0,\n      };\n    });\n  };\n\n  const onMove = (event: HandledEvents) => {\n    set((state, props) => {\n      // Discount a swipe if additional touches are present after\n      // a swipe has started.\n      if (\"touches\" in event && event.touches.length > 1) {\n        return state;\n      }\n      const { clientX, clientY } =\n        \"touches\" in event ? event.touches[0] : event;\n      const [x, y] = rotateXYByAngle([clientX, clientY], props.rotationAngle);\n      const deltaX = x - state.xy[0];\n      const deltaY = y - state.xy[1];\n      const absX = Math.abs(deltaX);\n      const absY = Math.abs(deltaY);\n      const time = (event.timeStamp || 0) - state.start;\n      const velocity = Math.sqrt(absX * absX + absY * absY) / (time || 1);\n      const vxvy: Vector2 = [deltaX / (time || 1), deltaY / (time || 1)];\n\n      // if swipe is under delta and we have not started to track a swipe: skip update\n      if (absX < props.delta && absY < props.delta && !state.swiping)\n        return state;\n\n      const dir = getDirection(absX, absY, deltaX, deltaY);\n      const eventData = {\n        absX,\n        absY,\n        deltaX,\n        deltaY,\n        dir,\n        event,\n        first: state.first,\n        initial: state.initial,\n        velocity,\n        vxvy,\n      };\n\n      // call onSwipeStart if present and is first swipe event\n      eventData.first && props.onSwipeStart && props.onSwipeStart(eventData);\n\n      // Call onSwiping if present\n      props.onSwiping && props.onSwiping(eventData);\n\n      // track if a swipe is cancelable(handler for swiping or swiped(dir) exists)\n      // so we can call preventDefault if needed\n      let cancelablePageSwipe = false;\n      if (props.onSwiping || props.onSwiped || `onSwiped${dir}` in props) {\n        cancelablePageSwipe = true;\n      }\n\n      if (\n        cancelablePageSwipe &&\n        props.preventDefaultTouchmoveEvent &&\n        props.trackTouch &&\n        event.cancelable\n      )\n        event.preventDefault();\n\n      return {\n        ...state,\n        // first is now always false\n        first: false,\n        eventData,\n        swiping: true,\n      };\n    });\n  };\n\n  const onEnd = (event: HandledEvents) => {\n    set((state, props) => {\n      let eventData: SwipeEventData | undefined;\n      if (state.swiping && state.eventData) {\n        eventData = { ...state.eventData, event };\n        props.onSwiped && props.onSwiped(eventData);\n\n        const onSwipedDir = `onSwiped${eventData.dir}`;\n        if (onSwipedDir in props) {\n          ((props as any)[onSwipedDir] as SwipeCallback)(eventData);\n        }\n      } else {\n        props.onTap && props.onTap({ event });\n      }\n      return { ...state, ...initialState, eventData };\n    });\n  };\n\n  const cleanUpMouse = () => {\n    // safe to just call removeEventListener\n    document.removeEventListener(mouseMove, onMove);\n    document.removeEventListener(mouseUp, onUp);\n  };\n\n  const onUp = (e: HandledEvents) => {\n    cleanUpMouse();\n    onEnd(e);\n  };\n\n  /**\n   * Switch of \"passive\" property for now.\n   * When `preventDefaultTouchmoveEvent` is:\n   * - true => { passive: false }\n   * - false => { passive: true }\n   *\n   * Could take entire `addEventListener` options object as a param later?\n   */\n  const attachTouch: AttachTouch = (el, passive) => {\n    let cleanup = () => {};\n    if (el && el.addEventListener) {\n      // attach touch event listeners and handlers\n      const tls: [\n        typeof touchStart | typeof touchMove | typeof touchEnd,\n        (e: HandledEvents) => void\n      ][] = [\n        [touchStart, onStart],\n        [touchMove, onMove],\n        [touchEnd, onEnd],\n      ];\n      tls.forEach(([e, h]) => el.addEventListener(e, h, { passive }));\n      // return properly scoped cleanup method for removing listeners, options not required\n      cleanup = () => tls.forEach(([e, h]) => el.removeEventListener(e, h));\n    }\n    return cleanup;\n  };\n\n  const onRef = (el: HTMLElement | null) => {\n    // \"inline\" ref functions are called twice on render, once with null then again with DOM element\n    // ignore null here\n    if (el === null) return;\n    set((state, props) => {\n      // if the same DOM el as previous just return state\n      if (state.el === el) return state;\n\n      const addState: { cleanUpTouch?: () => void } = {};\n      // if new DOM el clean up old DOM and reset cleanUpTouch\n      if (state.el && state.el !== el && state.cleanUpTouch) {\n        state.cleanUpTouch();\n        addState.cleanUpTouch = undefined;\n      }\n      // only attach if we want to track touch\n      if (props.trackTouch && el) {\n        addState.cleanUpTouch = attachTouch(\n          el,\n          !props.preventDefaultTouchmoveEvent\n        );\n      }\n\n      // store event attached DOM el for comparison, clean up, and re-attachment\n      return { ...state, el, ...addState };\n    });\n  };\n\n  // set ref callback to attach touch event listeners\n  const output: { ref: typeof onRef; onMouseDown?: typeof onStart } = {\n    ref: onRef,\n  };\n\n  // if track mouse attach mouse down listener\n  if (handlerProps.trackMouse) {\n    output.onMouseDown = onStart;\n  }\n\n  return [output, attachTouch];\n}\n\nfunction updateTransientState(\n  state: SwipeableState,\n  props: SwipeableProps,\n  attachTouch: AttachTouch\n) {\n  const addState: { cleanUpTouch?(): void } = {};\n  // clean up touch handlers if no longer tracking touches\n  if (!props.trackTouch && state.cleanUpTouch) {\n    state.cleanUpTouch();\n    addState.cleanUpTouch = undefined;\n  } else if (props.trackTouch && !state.cleanUpTouch) {\n    // attach/re-attach touch handlers\n    if (state.el) {\n      addState.cleanUpTouch = attachTouch(\n        state.el,\n        !props.preventDefaultTouchmoveEvent\n      );\n    }\n  }\n  return { ...state, ...addState };\n}\n\nexport function useSwipeable(options: SwipeableProps): SwipeableHandlers {\n  const { trackMouse } = options;\n  const transientState = React.useRef({ ...initialState });\n  const transientProps = React.useRef<SwipeablePropsWithDefaultOptions>({\n    ...defaultProps,\n  });\n  transientProps.current = { ...defaultProps, ...options };\n\n  const [handlers, attachTouch] = React.useMemo(\n    () =>\n      getHandlers(\n        (stateSetter) =>\n          (transientState.current = stateSetter(\n            transientState.current,\n            transientProps.current\n          )),\n        { trackMouse }\n      ),\n    [trackMouse]\n  );\n\n  transientState.current = updateTransientState(\n    transientState.current,\n    transientProps.current,\n    attachTouch\n  );\n\n  return handlers;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}